// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StudentEmployment.Data;

#nullable disable

namespace StudentEmployment.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230618121416_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("StudentEmployment.Models.CategoryType", b =>
                {
                    b.Property<int>("CategoryTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoryTypeId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CategoryTypeId");

                    b.ToTable("CategoryTypes");
                });

            modelBuilder.Entity("StudentEmployment.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CityId"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer");

                    b.HasKey("CityId");

                    b.HasIndex("RegionId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("StudentEmployment.Models.Employer", b =>
                {
                    b.Property<int>("EmployerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EmployerId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EmployerId");

                    b.ToTable("Employers");
                });

            modelBuilder.Entity("StudentEmployment.Models.FacultyType", b =>
                {
                    b.Property<int>("FacultyTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FacultyTypeId"));

                    b.Property<string>("FacultyTypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("FacultyTypeId");

                    b.ToTable("FacultyTypes");
                });

            modelBuilder.Entity("StudentEmployment.Models.LangSkill", b =>
                {
                    b.Property<int>("LangSkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LangSkillId"));

                    b.Property<string>("LangSkillName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LangSkillId");

                    b.ToTable("LangSkills");
                });

            modelBuilder.Entity("StudentEmployment.Models.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LanguageId"));

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LanguageId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("StudentEmployment.Models.PCSkill", b =>
                {
                    b.Property<int>("PCSkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PCSkillId"));

                    b.Property<string>("PCSkillName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PCSkillId");

                    b.ToTable("PCSkills");
                });

            modelBuilder.Entity("StudentEmployment.Models.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RegionId"));

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RegionId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("StudentEmployment.Models.Resume", b =>
                {
                    b.Property<int>("ResumeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ResumeId"));

                    b.Property<int?>("CityId")
                        .HasColumnType("integer");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("DesiredSalary")
                        .HasColumnType("numeric");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("LangSkillId")
                        .HasColumnType("integer");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<string>("OtherInf")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PCSkillId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PlacementTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer");

                    b.Property<bool>("ResumeStatus")
                        .HasColumnType("boolean");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.HasKey("ResumeId");

                    b.HasIndex("CityId");

                    b.HasIndex("LangSkillId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PCSkillId");

                    b.HasIndex("RegionId");

                    b.HasIndex("StudentId");

                    b.ToTable("Resumes");
                });

            modelBuilder.Entity("StudentEmployment.Models.Schedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ScheduleId"));

                    b.Property<string>("ScheduleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ScheduleId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("StudentEmployment.Models.SpecialtyType", b =>
                {
                    b.Property<int>("SpecialtyTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SpecialtyTypeId"));

                    b.Property<string>("SpecialtyTypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SpecialtyTypeId");

                    b.ToTable("SpecialtyTypes");
                });

            modelBuilder.Entity("StudentEmployment.Models.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StatusId"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("StatusId");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("StudentEmployment.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StudentId"));

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Course")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndStudy")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FacultyTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("GPA")
                        .HasColumnType("numeric");

                    b.Property<int>("Group")
                        .HasColumnType("integer");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Maidenname")
                        .HasColumnType("text");

                    b.Property<string>("Middlename")
                        .HasColumnType("text");

                    b.Property<int>("SpecialtyTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartStudy")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("StudentId");

                    b.HasIndex("FacultyTypeId");

                    b.HasIndex("SpecialtyTypeId");

                    b.HasIndex("StatusId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("StudentEmployment.Models.Vacancy", b =>
                {
                    b.Property<int>("VacancyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("VacancyId"));

                    b.Property<int?>("CategoryTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EmployerId")
                        .HasColumnType("integer");

                    b.Property<string>("Experience")
                        .HasColumnType("text");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OtherRequirements")
                        .HasColumnType("text");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Salary")
                        .HasColumnType("numeric");

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("integer");

                    b.Property<bool>("VacancyStatus")
                        .HasColumnType("boolean");

                    b.HasKey("VacancyId");

                    b.HasIndex("CategoryTypeId");

                    b.HasIndex("CityId");

                    b.HasIndex("EmployerId");

                    b.HasIndex("RegionId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Vacancies");
                });

            modelBuilder.Entity("StudentEmployment.Models.City", b =>
                {
                    b.HasOne("StudentEmployment.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("StudentEmployment.Models.Resume", b =>
                {
                    b.HasOne("StudentEmployment.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("StudentEmployment.Models.LangSkill", "LangSkill")
                        .WithMany()
                        .HasForeignKey("LangSkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentEmployment.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentEmployment.Models.PCSkill", "PCSkill")
                        .WithMany()
                        .HasForeignKey("PCSkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentEmployment.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentEmployment.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("LangSkill");

                    b.Navigation("Language");

                    b.Navigation("PCSkill");

                    b.Navigation("Region");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentEmployment.Models.Student", b =>
                {
                    b.HasOne("StudentEmployment.Models.FacultyType", "FacultyTypeName")
                        .WithMany()
                        .HasForeignKey("FacultyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentEmployment.Models.SpecialtyType", "SpecialtyTypeName")
                        .WithMany()
                        .HasForeignKey("SpecialtyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentEmployment.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FacultyTypeName");

                    b.Navigation("SpecialtyTypeName");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("StudentEmployment.Models.Vacancy", b =>
                {
                    b.HasOne("StudentEmployment.Models.CategoryType", "CategoryType")
                        .WithMany()
                        .HasForeignKey("CategoryTypeId");

                    b.HasOne("StudentEmployment.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentEmployment.Models.Employer", "Employer")
                        .WithMany()
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentEmployment.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentEmployment.Models.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId");

                    b.Navigation("CategoryType");

                    b.Navigation("City");

                    b.Navigation("Employer");

                    b.Navigation("Region");

                    b.Navigation("Schedule");
                });
#pragma warning restore 612, 618
        }
    }
}
